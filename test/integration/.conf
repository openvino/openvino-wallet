# ---------------------------------------------
# yankee.openvino.org - reverse proxy for TrustBloc stack
# ---------------------------------------------

# Helper para WebSocket/Upgrade (debe estar a nivel http{})
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# HTTP -> HTTPS
server {
    listen 80;
    server_name yankee.openvino.org;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name yankee.openvino.org;

    ssl_certificate     /etc/letsencrypt/live/yankee.openvino.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yankee.openvino.org/privkey.pem;

    # Upstreams (host -> containers)
    set $krakend https://127.0.0.1:5566;  # KrakenD con TLS en 5566
    set $vcrest  http://127.0.0.1:8075;
    set $resolver http://127.0.0.1:8072;
    set $files   http://127.0.0.1:10096;
    set $attest  http://127.0.0.1:8097;
    set $login   https://127.0.0.1:8099;
    set $trust   https://127.0.0.1:8100;

    # --------- KrakenD proxys (con TLS loopback) ---------

    location ^~ /issuer/ {
        # CORS (siempre en la respuesta)
        add_header Access-Control-Allow-Origin  * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Tenant-ID" always;
        # Preflight
        if ($request_method = OPTIONS) { return 204; }

        proxy_pass $krakend;
        proxy_http_version 1.1;
        proxy_set_header Host              $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;

        proxy_ssl_server_name on;
        proxy_ssl_name localhost;
        proxy_ssl_verify off;

        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_buffering off;
    }


    location ^~ /oidc/idp/ {
        proxy_pass $vcrest;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_buffering off;
    }

    location ^~ /verifier/ {
        add_header Access-Control-Allow-Origin  * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Tenant-ID" always;
        if ($request_method = OPTIONS) { return 204; }

        proxy_pass $krakend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_ssl_server_name on;
        proxy_ssl_name localhost;
        proxy_ssl_verify off;

        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_buffering off;
    }

    location ^~ /oidc/ {
        add_header Access-Control-Allow-Origin  * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Tenant-ID" always;
        if ($request_method = OPTIONS) { return 204; }

        proxy_pass $krakend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_ssl_server_name on;
        proxy_ssl_name localhost;
        proxy_ssl_verify off;

        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_buffering off;
    }

    location ^~ /refresh/ {
        add_header Access-Control-Allow-Origin  * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Tenant-ID" always;
        if ($request_method = OPTIONS) { return 204; }

        proxy_pass $krakend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_ssl_server_name on;
        proxy_ssl_name localhost;
        proxy_ssl_verify off;

        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_buffering off;
    }

    location ^~ /request-object/ {
        add_header Access-Control-Allow-Origin  * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Tenant-ID" always;
        if ($request_method = OPTIONS) { return 204; }

        proxy_pass $krakend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_ssl_server_name on;
        proxy_ssl_name localhost;
        proxy_ssl_verify off;

        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_buffering off;
    }

    location = /version {
        proxy_pass $krakend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_ssl_server_name on;
        proxy_ssl_name localhost;
        proxy_ssl_verify off;

        proxy_buffering off;
    }

    # --------- Otros servicios ---------

    location ^~ /trust-registry/ {
        add_header Access-Control-Allow-Origin  * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Tenant-ID" always;
        if ($request_method = OPTIONS) { return 204; }

        rewrite ^/trust-registry/(.*)$ /$1 break;
        proxy_pass $trust;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_ssl_server_name on;
        proxy_ssl_name localhost;
        proxy_ssl_verify off;
        proxy_buffering off;
    }

    location ^~ /attestation/ {
        add_header Access-Control-Allow-Origin  * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Tenant-ID" always;
        if ($request_method = OPTIONS) { return 204; }

        proxy_pass $attest;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_buffering off;
    }

    location ^~ /login-consent/ {
        add_header Access-Control-Allow-Origin  * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Tenant-ID" always;
        if ($request_method = OPTIONS) { return 204; }

        proxy_pass $login;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_ssl_server_name on;
        proxy_ssl_name localhost;
        proxy_ssl_verify off;
        proxy_buffering off;
    }

    location ^~ /resolver/ {
        add_header Access-Control-Allow-Origin  * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Tenant-ID" always;
        if ($request_method = OPTIONS) { return 204; }

        proxy_pass $resolver;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_buffering off;
    }

    location ^~ /files/ {
        add_header Access-Control-Allow-Origin  * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Tenant-ID" always;
        if ($request_method = OPTIONS) { return 204; }

        proxy_pass $files;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_buffering off;
    }

    # Health y Admin (vc-rest)
    location = /health {
        proxy_pass $vcrest;
        proxy_set_header X-API-Key  "rw_token";
        proxy_set_header Host $host;
    }

    location ^~ /admin/ {
        proxy_pass $vcrest;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-API-Key   "rw_token";
        proxy_set_header X-Tenant-ID "00000000-0000-0000-0000-000000000001";
        proxy_buffering off;
    }

# Cognito mock (9229) tras /cognito/
location ^~ /cognito/ {
    proxy_pass http://127.0.0.1:9229/;
    proxy_http_version 1.1;
    proxy_set_header Host              $host;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;

    # (Opcional) CORS si llamas desde browser/app
    add_header Access-Control-Allow-Origin  * always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
    if ($request_method = OPTIONS) { return 204; }

    proxy_buffering off;
}


    # Bloquea el resto
    location / { return 404; }
}
